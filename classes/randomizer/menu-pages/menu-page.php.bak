<?php
/**
 * User: vagenas
 * Date: 9/15/14
 * Time: 11:12 PM
 * @author Panagiotis Vagenas <pan.vagenas@gmail.com>
 * @copyright 9/15/14 XDaRk.eu <xdark.eu@gmail.com>
 * @link http://xdark.eu
 */

namespace randomizer\menu_pages;


if (!defined('WPINC')) {
    die;
}

/**
 * 
 * @package randomizer
 * @author pan.vagenas <pan.vagenas@gmail.com>
 */
class menu_page extends \wsc_v000000_dev\menu_pages\menu_page {

    /**
     * @var string Heading/title for this menu page.
     * @extenders Should be overridden by class extenders.
     */
    public $heading_title = '';

    /**
     * @var string Sub-heading/description for this menu page.
     * @extenders Should be overridden by class extenders.
     */
    public $sub_heading_description = '';

    /**
     * @var boolean Should sidebar panels share a global order?
     * @extenders Can be overridden by class extenders.
     */
    public $sidebar_panels_share_global_order = TRUE;

    /**
     * @var boolean Should sidebar panels share a global state?
     * @extenders Can be overridden by class extenders.
     */
    public $sidebar_panels_share_global_state = TRUE;

    /**
     * @var boolean Defaults to FALSE. Does this menu page update options?
     *    When TRUE, each menu page is wrapped with a form tag that calls `©options.®update`.
     *    In addition, `$this->option_fields` will be populated, for easy access to a `©form_fields` instance.
     *    In addition, each menu page will have a `Save All Options` button.
     *
     * @note This comes in handy, when a menu page is dedicated to updating options.
     *    Making it possible for a site owner to update all options (i.e. from all panels), in one shot.
     *    The `Save All Options` button at the bottom will facilitate this.
     *
     * @extenders Can easily be overridden by class extenders.
     */
    public $updates_options = FALSE;

    /**
     * Displays HTML markup for notices, for this menu page.
     *
     * @extenders Can be overridden by class extenders (e.g. by each menu page),
     *    so that custom notices could be displayed in certain cases.
     */
    public function display_notices()
    {
    }

    /**
     * Displays HTML markup producing content panels for this menu page.
     *
     * @extenders Should be overridden by class extenders (e.g. by each menu page),
     *    so that custom content panels can be displayed by this routine.
     */
    public function display_content_panels()
    {
        $this->display_content_panels_in_order();
    }

    /**
     * Displays HTML markup producing content panels for this menu page (in order).
     *
     * @extenders Should be called upon by class extenders (e.g. by each menu page),
     *    so that custom content panels can be displayed by this routine.
     */
    public function display_content_panels_in_order()
    {
        var_dump('asfas');
        die;
        $panel_slugs_displayed           = array(); // Initialize.
        $content_panels_in_order_by_slug = $this->get_content_panel_order();

        foreach($content_panels_in_order_by_slug as $_panel_slug)
        {
            if(!in_array($_panel_slug, $panel_slugs_displayed, TRUE))
                if($this->©string->is_not_empty($this->content_panels[$_panel_slug]))
                {
                    $panel_slugs_displayed[] = $_panel_slug;
                    echo $this->content_panels[$_panel_slug];
                }
        }
        unset($_panel_slug); // Housekeeping.

        foreach($this->content_panels as $_panel_slug => $_panel_markup)
        {
            if(!in_array($_panel_slug, $panel_slugs_displayed, TRUE))
                if($this->©string->is_not_empty($_panel_markup))
                {
                    $panel_slugs_displayed[] = $_panel_slug;
                    echo $_panel_markup;
                }
        }
        unset($_panel_slug, $_panel_markup); // Housekeeping.
    }

    /**
     * Displays HTML markup producing sidebar panels for this menu page.
     *
     * @extenders Can be overridden by class extenders (i.e. by each menu page),
     *    so that custom sidebar panels can be displayed by this routine.
     */
    public function display_sidebar_panels()
    {
        if(!$this->©plugin->has_pro_active())
            $this->add_sidebar_panel($this->©menu_pages__panels__pro_upgrade($this), TRUE);
        $this->add_sidebar_panel($this->©menu_pages__panels__email_updates($this));
        $this->add_sidebar_panel($this->©menu_pages__panels__news_kb($this));
        $this->add_sidebar_panel($this->©menu_pages__panels__community_forum($this));
        $this->add_sidebar_panel($this->©menu_pages__panels__videos($this));
        $this->add_sidebar_panel($this->©menu_pages__panels__donations($this));

        $this->display_sidebar_panels_in_order();
    }

    /**
     * Displays HTML markup producing sidebar panels for this menu page (in order).
     *
     * @extenders Should be called upon by class extenders (e.g. by each menu page),
     *    so that custom sidebar panels can be displayed by this routine.
     */
    public function display_sidebar_panels_in_order()
    {
        $sidebar_panels_in_order_by_slug = $this->get_sidebar_panel_order();
        $panel_slugs_displayed           = array();

        foreach($sidebar_panels_in_order_by_slug as $_panel_slug)
        {
            if(!in_array($_panel_slug, $panel_slugs_displayed, TRUE))
                if($this->©string->is_not_empty($this->sidebar_panels[$_panel_slug]))
                {
                    $panel_slugs_displayed[] = $_panel_slug;
                    echo $this->sidebar_panels[$_panel_slug];
                }
        }
        unset($_panel_slug); // Housekeeping.

        foreach($this->sidebar_panels as $_panel_slug => $_panel_markup)
        {
            if(!in_array($_panel_slug, $panel_slugs_displayed, TRUE))
                if($this->©string->is_not_empty($_panel_markup))
                {
                    $panel_slugs_displayed[] = $_panel_slug;
                    echo $_panel_markup;
                }
        }
        unset($_panel_slug, $_panel_markup);
    }
}